{"version":3,"sources":["assets/js/reverb.js"],"names":["reverbjs","extend","audioContext","decodeBase64ToArrayBuffer","input","encodedValue","index","encodedCharacter","x","charCodeAt","length","console","log","padding","match","decodedLength","buffer","ArrayBuffer","bufferView","Uint8Array","encoded","d","e","i","Math","floor","decodeAndSetupBuffer","node","arrayBuffer","callback","decodeAudioData","audioBuffer","createReverbFromBase64","audioBase64","reverbNode","createConvolver","createSourceFromBase64","sourceNode","createBufferSource","createReverbFromUrl","audioUrl","request","XMLHttpRequest","open","onreadystatechange","readyState","status","response","onerror","networkError","responseType","send","createSourceFromUrl","createReverbFromBase64Url","createSourceFromBase64Url"],"mappings":"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","file":"reverb.07271de2.js","sourceRoot":"..","sourcesContent":["/*global ArrayBuffer, Uint8Array, window, XMLHttpRequest*/\nvar reverbjs = {\n  extend : function (audioContext) {\n    function decodeBase64ToArrayBuffer(input) {\n      function encodedValue(input, index) {\n        var encodedCharacter, x = input.charCodeAt(index);\n        if (index < input.length) {\n          if (x >= 65 && x <= 90) {\n            encodedCharacter = x - 65;\n          } else if (x >= 97 && x <= 122) {\n            encodedCharacter = x - 71;\n          } else if (x >= 48 && x <= 57) {\n            encodedCharacter = x + 4;\n          } else if (x === 43) {\n            encodedCharacter = 62;\n          } else if (x === 47) {\n            encodedCharacter = 63;\n          } else if (x !== 61) {\n            console.log('base64 encountered unexpected character code: ' + x);\n          }\n        }\n        return encodedCharacter;\n      }\n\n      if (input.length === 0 || (input.length % 4) > 0) {\n        console.log('base64 encountered unexpected length: ' + input.length);\n        return;\n      }\n\n      var padding = input.match(/[=]*$/)[0].length,\n        decodedLength = input.length * 3 / 4 - padding,\n        buffer = new ArrayBuffer(decodedLength),\n        bufferView = new Uint8Array(buffer),\n        encoded = [],\n        d = 0,\n        e = 0,\n        i;\n\n      while (d < decodedLength) {\n        for (i = 0; i < 4; i += 1) {\n          encoded[i] = encodedValue(input, e);\n          e += 1;\n        }\n        bufferView[d] = (encoded[0] * 4) + Math.floor(encoded[1] / 16);\n        d += 1;\n        if (d < decodedLength) {\n          bufferView[d] = ((encoded[1] % 16) * 16) + Math.floor(encoded[2] / 4);\n          d += 1;\n        }\n        if (d < decodedLength) {\n          bufferView[d] = ((encoded[2] % 4) * 64) + encoded[3];\n          d += 1;\n        }\n      }\n      return buffer;\n    }\n\n    function decodeAndSetupBuffer(node, arrayBuffer, callback) {\n      audioContext.decodeAudioData(arrayBuffer, function (audioBuffer) {\n        console.log('Finished decoding audio data.');\n        node.buffer = audioBuffer;\n        if (typeof callback === \"function\" && audioBuffer !== null) {\n          callback(node);\n        }\n      }, function (e) {\n        console.log('Could not decode audio data: ' + e);\n      });\n    }\n\n    audioContext.createReverbFromBase64 = function (audioBase64, callback) {\n      var reverbNode = audioContext.createConvolver();\n      decodeAndSetupBuffer(reverbNode, decodeBase64ToArrayBuffer(audioBase64),\n        callback);\n      return reverbNode;\n    };\n\n    audioContext.createSourceFromBase64 = function (audioBase64, callback) {\n      var sourceNode = audioContext.createBufferSource();\n      decodeAndSetupBuffer(sourceNode, decodeBase64ToArrayBuffer(audioBase64),\n        callback);\n      return sourceNode;\n    };\n\n    audioContext.createReverbFromUrl = function (audioUrl, callback) {\n      console.log('Downloading impulse response from ' + audioUrl);\n      var reverbNode = audioContext.createConvolver(),\n        request = new XMLHttpRequest();\n      request.open('GET', audioUrl, true);\n      request.onreadystatechange = function () {\n        if (request.readyState === 4 && request.status === 200) {\n          console.log('Downloaded impulse response');\n          decodeAndSetupBuffer(reverbNode, request.response, callback);\n        }\n      };\n      request.onerror = function (e) {\n        console.log('There was an error receiving the response: ' + e);\n        reverbjs.networkError = e;\n      };\n      request.responseType = 'arraybuffer';\n      request.send();\n      return reverbNode;\n    };\n\n    audioContext.createSourceFromUrl = function (audioUrl, callback) {\n      console.log('Downloading sound from ' + audioUrl);\n      var sourceNode = audioContext.createBufferSource(),\n        request = new XMLHttpRequest();\n      request.open('GET', audioUrl, true);\n      request.onreadystatechange = function () {\n        if (request.readyState === 4 && request.status === 200) {\n          console.log('Downloaded sound');\n          decodeAndSetupBuffer(sourceNode, request.response, callback);\n        }\n      };\n      request.onerror = function (e) {\n        console.log('There was an error receiving the response: ' + e);\n        reverbjs.networkError = e;\n      };\n      request.responseType = 'arraybuffer';\n      request.send();\n      return sourceNode;\n    };\n\n    audioContext.createReverbFromBase64Url = function (audioUrl, callback) {\n      console.log('Downloading base64 impulse response from ' + audioUrl);\n      var reverbNode = audioContext.createConvolver(),\n        request = new XMLHttpRequest();\n      request.open('GET', audioUrl, true);\n      request.onreadystatechange = function () {\n        if (request.readyState === 4 && request.status === 200) {\n          console.log('Downloaded impulse response');\n          decodeAndSetupBuffer(reverbNode,\n            decodeBase64ToArrayBuffer(request.response),\n            callback);\n        }\n      };\n      request.onerror = function (e) {\n        console.log('There was an error receiving the response: ' + e);\n        reverbjs.networkError = e;\n      };\n      request.send();\n      return reverbNode;\n    };\n\n    audioContext.createSourceFromBase64Url = function (audioUrl, callback) {\n      console.log('Downloading base64 sound from ' + audioUrl);\n      var sourceNode = audioContext.createBufferSource(),\n        request = new XMLHttpRequest();\n      request.open('GET', audioUrl, true);\n      request.onreadystatechange = function () {\n        if (request.readyState === 4 && request.status === 200) {\n          console.log('Downloaded sound');\n          decodeAndSetupBuffer(sourceNode,\n            decodeBase64ToArrayBuffer(request.response),\n            callback);\n        }\n      };\n      request.onerror = function (e) {\n        console.log('There was an error receiving the response: ' + e);\n        reverbjs.networkError = e;\n      };\n      request.send();\n      return sourceNode;\n    };\n  }\n};\n"]}